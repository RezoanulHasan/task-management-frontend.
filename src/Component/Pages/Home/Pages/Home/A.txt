  const [addTask] = useAddTaskMutation();
import {
  Tasks,
  useGetAllTasksQuery,
  useAddTaskMutation,
  useDeleteTaskByIdMutation,
  useUpdateTaskByIdMutation,
} from "../../../Redux/features/auth/taskApi";

const handleAddTask = async (newTask: Partial<Tasks>) => {
    try {
      const result = await addTask(newTask).unwrap();
      console.log("Task added:", result);
      await refetch(); // Refetch all tasks after add
      Swal.fire({
        icon: "success",
        title: "Task Added!",
        text: "Your new task has been successfully added.",
      });
    } catch (error) {
      console.error("Error adding task:", error);
      Swal.fire({
        icon: "error",
        title: "Error",
        text: "Failed to add task. Please try again later.",
      });
    }
  };

  <div className="mt-8">
  <h2 className="text-xl font-bold mb-4">Add New Task</h2>
  <form
    onSubmit={(e) => {
      e.preventDefault();
      const formData = new FormData(e.target as HTMLFormElement);
      const newTask: Partial<Tasks> = {
        title: formData.get("title") as string,
        description: formData.get("description") as string,
        status: "incomplete",
      };
      handleAddTask(newTask);
    }}
  >
    <label className="block mb-2">
      Title:
      <input
        type="text"
        name="title"
        required
        className="border-2 border-gray-300 focus:outline-none focus:border-blue-500 px-4 py-2 rounded-md block w-full mt-1"
      />
    </label>
    <label className="block mb-2">
      Description:
      <textarea
        name="description"
        required
        className="border-2 border-gray-300 focus:outline-none focus:border-blue-500 px-4 py-2 rounded-md block w-full mt-1"
      ></textarea>
    </label>
    <button
      type="submit"
      className="bg-blue-500 text-white px-4 py-2 rounded-md"
    >
      Add Task
    </button>
  </form>
</div>






     <input
                type="text"
                value={task.title}
                onChange={(e) =>
                  handleUpdateTask(task._id!, { title: e.target.value })
                }
                className="border-b-2 border-gray-300 focus:outline-none focus:border-blue-500 mb-2"
              />
              <textarea
                value={task.description}
                onChange={(e) =>
                  handleUpdateTask(task._id!, { description: e.target.value })
                }
                className="border-2 border-gray-300 focus:outline-none focus:border-blue-500 mb-2"
              />






